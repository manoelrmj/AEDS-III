#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package none
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabalho Prático 3: Alimentação Saudável
\end_layout

\begin_layout Author
Manoel da Rocha Miranda Júnior {manoelrmj@dcc.ufmg.br}
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
\align block
Este trabalho prático tem como objetivo desenvolver um programa que auxilie
 o Departamento de Nutrição a criar planos alimentares para as pessoas participa
ntes de um evento sobre alimentação saudável.
 Para que se tenha uma vida saudável é necessário ingerir uma quantidade
 de calorias diárias que variam de acordo com características de cada indivíduo.
 Neste sentido, é necessário verificar se, dentre um conjunto de alimentos
 com valores calóricos determinados, existe um subconjunto cuja soma é igual
 à necessidade calórica de uma pessoa em questão.
 Por exemplo, se uma pessoa tem a sua disposição os seguintes alimentos
 com os respectivos valores calóricos: 30, 34, 40, 12, 50, 20, 45, 70, 63,
 41, 110, 17, 130, 23 e 50, e uma necessidade diária de consumo de 313 calorias,
 é necessário verificar se existe uma combinação de alimentos cuja soma
 de calorias corresponde à necessidade de consumo especificada.
 No caso deste exemplo, a resposta é sim, uma vez que ao escolher os alimentos
 de calorias 50, 110, 130 e 23 é possível chegar ao consumo determinado
 de 313 calorias.
\end_layout

\begin_layout Standard
A implementação da solução deste problema consiste em um algoritmo de força
 bruta paralelizado, onde todas as combinações possíveis são testadas paralelame
nte até que alguma delas encontre (caso exista) um subconjunto de alimentos
 cuja soma seja igual a especificada, sendo que a resposta de cada instância
 pode ser 'sim' ou 'nao'.
 
\end_layout

\begin_layout Section
Solução
\end_layout

\begin_layout Standard
Este problema, bastante conhecido na ciência da computação, é comumente
 chamado de 
\shape italic
subset sum problem
\shape default
, ou 
\shape italic
problema da soma do subconjunto
\shape default
.
 Uma possível implementação, e que foi utilizada na solução deste trabalho,
 consiste em gerar todas as combinações possíveis de elementos do conjunto
 por força bruta e somar os elementos da combinação gerada em busca da soma
 desejada.
 Na implementação deste trabalho essa abordagem foi utilizada juntamente
 com uma técnica de paralelização através da biblioteca pthread, uma biblioteca
 para a linguagem C que padroniza o uso de threads em sistemas UNIX.
\end_layout

\begin_layout Standard
Inicialmente, para cada instância do problema, é feita uma divisão das combinaçõ
es existentes entre as threads.
 No caso desta implementação, o número máximo de threads utilizáveis corresponde
 ao número de alimentos na entrada, já que esta é também a quantidade de
 grupos formados por sub-grupos de mesmo tamanho que podem ser gerados.
 O número de threads a serem criadas é passado pelo parâmetro -t na execução
 do programa.
 Cada thread recebe como parâmetro um intervalo de combinações a serem geradas
 e analisadas bem como os elementos lidos, quantidade de elementos na entrada,
 a soma desejada e um ponteiro pra uma variável que sinalizará se existe
 ou não uma soma que satisfaça o valor desejado de calorias.
 Depois de criado os argumentos das threads, as threads são criadas e cada
 uma delas roda o algoritmo de combinação para a faixa de valores de combinação
 que à ela foi atribuído.
\end_layout

\begin_layout Standard
Dessa forma, a solução pode ser caracterizada de uma forma geral como sendo
 um algoritmo de força bruta com paralelismo de dados.
 A seguir, é apresentada uma imagem esquematizando como é feita a divisão
 no processo de paralelismo de uma possível instância do problema.
 No caso em questão, a entrada consiste de 4 alimentos e para exemplificar,
 são utilizadas 4 threads:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/manoel/Documents/AEDS-III/TPs/TP3/assets/exemplo_thread.pdf
	scale 52

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemplo de instância e divisão entre threads.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esta implementação que explora o paralelismo de dados tem como potencial
 fonte de degradação de desempenho o desbalanceamento de carga entre as
 threads, uma vez que as linhas de execução que buscam a solução em combinações
 cujo tamanho dos subconjuntos sejam relativamente pequenos ou grandes,
 possuem um número de subconjuntos menor em relação às demais e portanto
 um espaço de busca menor.
\end_layout

\begin_layout Standard
Vale observar que o número de combinações possíveis ao escolher K elementos
 de um conjunto composto por N elementos, é dado pela fórmula
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C=\frac{N!}{K!(N-K)!}
\]

\end_inset


\end_layout

\begin_layout Standard
A seguir um pseudo código descrevendo sucintamente a solução:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\small},language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

verificaSolucao(){
\end_layout

\begin_layout Plain Layout

	/* Cria as threads com os parâmetros definidos.
 No argumento
\end_layout

\begin_layout Plain Layout

	de cada thread constará o intervalo de combinações a serem 
\end_layout

\begin_layout Plain Layout

	geradas e avaliadas.*/
\end_layout

\begin_layout Plain Layout

	for(i=0 ate qtdeThreads)
\end_layout

\begin_layout Plain Layout

		pthread_create(thread[i], metodoThread, argumento[i]);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	for(i=0 ate qtdeThreads)
\end_layout

\begin_layout Plain Layout

		pthread_join(thread[i]); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

metodoThread(){	
\end_layout

\begin_layout Plain Layout

	// Verifica se a thread possui combinação para computar
\end_layout

\begin_layout Plain Layout

	if(combinacaoInicial != 0 && combinacaoFinal != 0){
\end_layout

\begin_layout Plain Layout

		for(i= combinacaoIncial até combinacaoFinal)
\end_layout

\begin_layout Plain Layout

			/* Executa a combinação escolhendo i 
\end_layout

\begin_layout Plain Layout

			elementos dentro do conjunto de alimentos */
\end_layout

\begin_layout Plain Layout

			combinacao(i);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pseudo código da solução
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Classificação do problema
\end_layout

\begin_layout Standard
O problema abordado neste trabalho pode ser classificado quanto a sua dificuldad
e em termos computacionais de resolvê-lo.
 Esta seção é destinada a avaliar o problema quanto à sua classificação
 e determinar a qual classe de complexidade ele pertence.
 
\end_layout

\begin_layout Standard
O problema da soma do subconjunto, com o qual o problema abordado neste
 trabalho prático se assemelha pertence à classe NP-Completo.
 Para provar que o problema tratado é NP-Completo, primeiramente deve-se
 provar que o problema pertence à classe NP.
 Para isso, antes de mais nada, ele deve ser formulado como um problema
 de decisão, a saber: 'dado um conjunto de elementos inteiros e um valor
 inteiro S, existe algum subconjunto cuja soma de seus elementos é igual
 à S?'.
 Podemos perceber claramente, que o problema tratado trata-se de um problema
 de decisão da forma sim/não.
 
\end_layout

\begin_layout Standard
Para provar que um dado problema pertence à classe NP, é necessário apresentar
 um algoritmo não determinista que apresenta a solução em tempo polinomial
 
\shape italic
ou
\shape default
 apresentar um algoritmo determinista que verifica a validade de uma solução
 proposta em tempo polinomial.
 Para o problema tratado neste trabalho, está descrito a seguir um pseudo
 código que implementa um algoritmo 
\shape italic
determinista
\shape default
 que verifica a validade da solução em tempo polinomial.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\small},language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

/*Este algoritmo verifica se a soma dos valores no arranjo 
\end_layout

\begin_layout Plain Layout

possivelSolucao de tamanho N é igual à um valor S definido.
 */
\end_layout

\begin_layout Plain Layout

verificaSolucao(possivel_solucao[], S){
\end_layout

\begin_layout Plain Layout

	for(i=0 até N){
\end_layout

\begin_layout Plain Layout

		somaTotal += possivel_solucao[i];
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(somaTotal == S){
\end_layout

\begin_layout Plain Layout

		// A solução proposta é válida
\end_layout

\begin_layout Plain Layout

		return true;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else{
\end_layout

\begin_layout Plain Layout

		// A solução proposta não é válida
\end_layout

\begin_layout Plain Layout

		return false;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Algoritmo determinista que valida a solução do 
\shape italic
subset sum problem
\shape default
 em tempo polinomial.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
O Algorítmo 2 mostra como é possível determinar a validade de uma solução
 proposta em tempo polinomial.
 Este algoritmo apresenta ordem de complexidade assintótica 
\begin_inset Formula $O(N)$
\end_inset

, sendo N a quantidade de elementos do subconjunto no qual deseja-se avaliar
 a solução.
\end_layout

\begin_layout Standard
// To be continued
\end_layout

\begin_layout Section
Análise de custo
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Tempo
\end_layout

\begin_layout Standard
Para a análise teórica do custo assintótico de tempo, foi levado em consideração
 a manipulação de threads e o algoritmo de combinação, que são as partes
 principais que compõem a implementação do trabalho.
 Seja T o número de threads a serem utilizadas e N o tamanho da entrada
 lida, ou seja, a quantidade de alimentos que compõem o conjunto de cada
 instância.
 Inicialmente, para cada thread, são feitas instâncias de uma estrutura
 que é utilizada para passar os parâmetros necessários para a execução de
 cada uma delas e em seguida as threads são executadas.
 Desta forma, o método 
\shape italic
verificaSolucao
\shape default
 apresenta complexidade 
\begin_inset Formula $O(T)$
\end_inset

, já que para cada thread é feita uma atribuição de parâmetros que serão
 usados na sua execução.
 
\end_layout

\begin_layout Standard
Para cada uma das threads, existe uma faixa de valores de combinações 
\begin_inset Quotes eld
\end_inset


\emph on
n
\emph default
 a 
\emph on
n
\emph default

\begin_inset Quotes erd
\end_inset

 a serem geradas e analisadas em busca da soma definida para cada instância.
 Cada uma das threads gera as combinações que foram à ela atribuídas.
 Considerando o pior caso onde não existe nenhum subconjunto de valores
 do conjunto lido tal que a soma de seus elementos seja igual ao valor ideal
 de calorias a consumir, serão gerados todos os subconjuntos possíveis (de
 forma paralela, dependendo do número de threads) em busca do valor da soma.
 Dessa forma, será gerado o conjunto potência do conjunto de calorias lido
 da entrada, com exceção do conjunto vazio.
 A quantidade de subconjuntos de de K valores em uma entrada composta por
 N calorias é dada pela fórmula 
\begin_inset Formula $C=\frac{N!}{K!(N-K)!}$
\end_inset

 e o total de combinações geradas ao variar o valor de K entre 1 e N é igual
 a 
\begin_inset Formula $2^{N}$
\end_inset

.
 Dessa forma, considerando o pior caso onde a resposta para o problema é
 '
\emph on
nao
\emph default
', serão geradas 
\begin_inset Formula $2^{N}$
\end_inset

 combinações, o que implica em uma complexidade assintótica de 
\begin_inset Formula $O(2^{N})$
\end_inset

.
 
\end_layout

\begin_layout Standard
Analisando o algoritmo de forma geral, temos a complexidade assintótica
 de tempo igual a 
\begin_inset Formula $O(T+2^{N})$
\end_inset

, que assintoticamente é igual a 
\begin_inset Formula $O(2^{N})$
\end_inset

.
 Ou seja, o custo computacional relacionado à manipulação das threads se
 torna irrelevante perto do custo relacionado à geração de todas as combinações
 possíveis de subconjuntos de calorias.
 
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Espaço
\end_layout

\begin_layout Standard
O consumo de memória cresce linearmente com o tamanho da entrada.
 O arranjo de calorias é lido e passado por referência para as threads por
 meio da estrutura de argumentos e posteriormente para o método de combinações.
 Para cada combinação é gerado um arranjo auxiliar cujo tamanho varia com
 o número de elementos do subconjunto gerado, e esse arranjo é reaproveitado
 a cada combinação.
 Dessa forma, a complexidade espacial da solução implementada no trabalho
 é 
\begin_inset Formula $O(N)$
\end_inset

, onde N corresponde ao tamanho da entrada (quantidade de calorias).
\end_layout

\begin_layout Section
Análise experimental
\end_layout

\begin_layout Standard
Nas análises experimentais realizadas foi possível perceber que o uso de
 múltiplas threads acrescentou um ganho significativo de desempenho na execução
 do programa principalmente nos casos em que existe uma combinação cuja
 soma dos valores corresponde a quantidade de calorias desejadas.
 Nas execuções onde o número de threads se equipara ao número de alimentos
 na entrada, o problema fica dividido de tal forma que cada thread recebe
 apenas um valor de tamanho de combinações a serem geradas.
 Neste caso, quando o sistema escalona e alterna a execução entre as threads
 criadas, eventualmente a thread que vai gerar a combinação com o valor
 correto é executada e ao encontrar a solução tanto esta quanto as demais
 threads não executam mais valores de combinação, uma vez que a resposta
 do problema será 'sim'.
 Desta forma, mesmo para grandes instâncias, onde o valor de calorias da
 entrada fica em torno de 300, o programa faz a computação de forma relativament
e rápida.
 
\end_layout

\begin_layout Standard
Quando a saída do problema é não, todas as combinações possíveis devem ser
 geradas, uma vez que não haverá interrupção na geração das combinações
 por achar alguma combinação cuja soma dê o valor requerido.
 Nestes casos aumentar o número de threads ajuda, mas não tem um impacto
 muito grande no tempo de execução em casos onde existe um grande número
 de calorias, já que o custo computacional do problema cresce exponencialmente
 com o tamanho da entrada, como aferido na seção 4.
\end_layout

\begin_layout Standard
Vale lembrar que mesmo dividindo os valores do tamanho das combinações igualment
e entre as threads, ainda ocorre o desbalanceamento de carga, onde algumas
 threads possuem um trabalho maior a ser executado em função do maior número
 de subconjuntos a serem gerados, o que caracteriza uma potencial fonte
 de degradação de desempenho para a paralelização proposta.
 
\end_layout

\begin_layout Standard
O tempo gasto pelo algoritmo foi medido pelo comando time do Linux.
 Esta ferramenta retorna o tempo gasto na execução de um comando.
 O experimento foi feito em uma máquina com processador Intel Core i3 2.3
 GHz, com suporte à execução de 4 threads simultâneas, e 4 GB de memória
 RAM.
 Os resultados obtidos para cada condição estão descritos a seguir:
\end_layout

\begin_layout Subsection
Variação da quantidade de threads
\end_layout

\begin_layout Standard
Para analisar o impacto da quantidade de threads, foi considerada uma entrada
 com 10 instâncias do problema onde nenhuma delas possui um subconjunto
 cuja soma é igual ao valor desejado de calorias.
 A quantidade de alimentos foi mantida em 20 e o número de threads variado
 entre 2 e 20.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/manoel/Documents/AEDS-III/TPs/TP3/assets/varia_thread.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tempos de execução em função da quantidade de threads
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pode-se perceber que o aumento no número de threads até certo ponto aumenta
 o desempenho do programa.
 Entretanto, devido à um maior desbalanceamento de carga, ocorre uma degradação
 de desempenho considerável para valores próximos de 14 threads.
 Desta forma fica evidente que a divisão das combinações entre as threads
 é um fator decisivo para um bom ganho de desempenho.
\end_layout

\begin_layout Subsection
Variação da quantidade de alimentos
\end_layout

\begin_layout Standard
Para observar como o tamanho do problema interfere no tempo de execução,
 foi feito um experimento variando o tamanho da entrada e mantendo o número
 de threads.
 O número de threads foi mantido no máximo possível, ou seja, igual ao número
 de elementos da entrada.
 Para avaliar o comportamento no pior caso, todas as instâncias do teste
 foram criadas de forma a não existir um subconjunto cuja soma seja igual
 a quantidade de calorias desejada.
 Dessa forma, todas as possíveis combinações são geradas.
 O resultado está descrito no gráfico a seguir:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/manoel/Documents/AEDS-III/TPs/TP3/assets/varicao_alimentos.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Variação do tempo em função da quantidade de alimentos 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pode ser verificado, conforme foi aferido na análise de complexidade temporal,
 que o tempo necessário para resolver o problema cresce de forma exponencial
 com o tamanho da entrada.
\end_layout

\begin_layout Section
Conclusão
\end_layout

\begin_layout Standard
A partir deste trabalho prático, pôde-se avaliar os reais ganhos de implementaçõ
es que levam em conta alguma estratégia de paralelismo.
 É possível notar que a paralelização da solução traz ganhos reais e muito
 significativos para instâncias particulares do problema, onde a divisão
 e o processamento paralelo do problema podem levar rapidamente à sua solução.
 No caso deste trabalho, onde o paralelismo de dados foi explorado, foi
 possível perceber fontes de degradação de desempenho, como no caso do desbalanc
eamento de carga inerente à forma como o problema é dividido entre as linhas
 de execução.
\end_layout

\begin_layout Standard
Em contrapartida, por ser um problema pertencente à uma classe de alta complexid
ade computacional, como pode ser visto na prova do problema como NP-Completo,
 é possível perceber que a paralelização não impacta significativamente
 nos piores casos, onde existe uma instância grande e um valor de calorias
 desejado que não pode ser alcançado em nenhuma combinação da entrada.
 Como o crescimento do problema é exponencial, processar todas as combinações
 possíveis, mesmo de forma paralela, pode ser custoso do ponto de vista
 computacional.
\end_layout

\end_body
\end_document
